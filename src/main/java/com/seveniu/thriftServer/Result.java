/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.seveniu.thriftServer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-17")
public class Result implements org.apache.thrift.TBase<Result, Result._Fields>, java.io.Serializable, Cloneable, Comparable<Result> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Result");

  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STORAGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("storageName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ORGIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orginName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EXTENSION_FIELD_DESC = new org.apache.thrift.protocol.TField("extension", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResultTupleSchemeFactory());
  }

  public String url; // required
  public String storageName; // required
  public String orginName; // required
  public String extension; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    URL((short)1, "url"),
    STORAGE_NAME((short)2, "storageName"),
    ORGIN_NAME((short)3, "orginName"),
    EXTENSION((short)4, "extension");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // URL
          return URL;
        case 2: // STORAGE_NAME
          return STORAGE_NAME;
        case 3: // ORGIN_NAME
          return ORGIN_NAME;
        case 4: // EXTENSION
          return EXTENSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STORAGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("storageName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORGIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("orginName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTENSION, new org.apache.thrift.meta_data.FieldMetaData("extension", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Result.class, metaDataMap);
  }

  public Result() {
  }

  public Result(
    String url,
    String storageName,
    String orginName,
    String extension)
  {
    this();
    this.url = url;
    this.storageName = storageName;
    this.orginName = orginName;
    this.extension = extension;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Result(Result other) {
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetStorageName()) {
      this.storageName = other.storageName;
    }
    if (other.isSetOrginName()) {
      this.orginName = other.orginName;
    }
    if (other.isSetExtension()) {
      this.extension = other.extension;
    }
  }

  public Result deepCopy() {
    return new Result(this);
  }

  @Override
  public void clear() {
    this.url = null;
    this.storageName = null;
    this.orginName = null;
    this.extension = null;
  }

  public String getUrl() {
    return this.url;
  }

  public Result setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getStorageName() {
    return this.storageName;
  }

  public Result setStorageName(String storageName) {
    this.storageName = storageName;
    return this;
  }

  public void unsetStorageName() {
    this.storageName = null;
  }

  /** Returns true if field storageName is set (has been assigned a value) and false otherwise */
  public boolean isSetStorageName() {
    return this.storageName != null;
  }

  public void setStorageNameIsSet(boolean value) {
    if (!value) {
      this.storageName = null;
    }
  }

  public String getOrginName() {
    return this.orginName;
  }

  public Result setOrginName(String orginName) {
    this.orginName = orginName;
    return this;
  }

  public void unsetOrginName() {
    this.orginName = null;
  }

  /** Returns true if field orginName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrginName() {
    return this.orginName != null;
  }

  public void setOrginNameIsSet(boolean value) {
    if (!value) {
      this.orginName = null;
    }
  }

  public String getExtension() {
    return this.extension;
  }

  public Result setExtension(String extension) {
    this.extension = extension;
    return this;
  }

  public void unsetExtension() {
    this.extension = null;
  }

  /** Returns true if field extension is set (has been assigned a value) and false otherwise */
  public boolean isSetExtension() {
    return this.extension != null;
  }

  public void setExtensionIsSet(boolean value) {
    if (!value) {
      this.extension = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case STORAGE_NAME:
      if (value == null) {
        unsetStorageName();
      } else {
        setStorageName((String)value);
      }
      break;

    case ORGIN_NAME:
      if (value == null) {
        unsetOrginName();
      } else {
        setOrginName((String)value);
      }
      break;

    case EXTENSION:
      if (value == null) {
        unsetExtension();
      } else {
        setExtension((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case URL:
      return getUrl();

    case STORAGE_NAME:
      return getStorageName();

    case ORGIN_NAME:
      return getOrginName();

    case EXTENSION:
      return getExtension();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case URL:
      return isSetUrl();
    case STORAGE_NAME:
      return isSetStorageName();
    case ORGIN_NAME:
      return isSetOrginName();
    case EXTENSION:
      return isSetExtension();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Result)
      return this.equals((Result)that);
    return false;
  }

  public boolean equals(Result that) {
    if (that == null)
      return false;

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_storageName = true && this.isSetStorageName();
    boolean that_present_storageName = true && that.isSetStorageName();
    if (this_present_storageName || that_present_storageName) {
      if (!(this_present_storageName && that_present_storageName))
        return false;
      if (!this.storageName.equals(that.storageName))
        return false;
    }

    boolean this_present_orginName = true && this.isSetOrginName();
    boolean that_present_orginName = true && that.isSetOrginName();
    if (this_present_orginName || that_present_orginName) {
      if (!(this_present_orginName && that_present_orginName))
        return false;
      if (!this.orginName.equals(that.orginName))
        return false;
    }

    boolean this_present_extension = true && this.isSetExtension();
    boolean that_present_extension = true && that.isSetExtension();
    if (this_present_extension || that_present_extension) {
      if (!(this_present_extension && that_present_extension))
        return false;
      if (!this.extension.equals(that.extension))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_url = true && (isSetUrl());
    list.add(present_url);
    if (present_url)
      list.add(url);

    boolean present_storageName = true && (isSetStorageName());
    list.add(present_storageName);
    if (present_storageName)
      list.add(storageName);

    boolean present_orginName = true && (isSetOrginName());
    list.add(present_orginName);
    if (present_orginName)
      list.add(orginName);

    boolean present_extension = true && (isSetExtension());
    list.add(present_extension);
    if (present_extension)
      list.add(extension);

    return list.hashCode();
  }

  @Override
  public int compareTo(Result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStorageName()).compareTo(other.isSetStorageName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorageName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storageName, other.storageName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrginName()).compareTo(other.isSetOrginName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrginName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orginName, other.orginName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtension()).compareTo(other.isSetExtension());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtension()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extension, other.extension);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Result(");
    boolean first = true;

    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("storageName:");
    if (this.storageName == null) {
      sb.append("null");
    } else {
      sb.append(this.storageName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orginName:");
    if (this.orginName == null) {
      sb.append("null");
    } else {
      sb.append(this.orginName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extension:");
    if (this.extension == null) {
      sb.append("null");
    } else {
      sb.append(this.extension);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (url == null) {
      throw new TProtocolException("Required field 'url' was not present! Struct: " + toString());
    }
    if (storageName == null) {
      throw new TProtocolException("Required field 'storageName' was not present! Struct: " + toString());
    }
    if (orginName == null) {
      throw new TProtocolException("Required field 'orginName' was not present! Struct: " + toString());
    }
    if (extension == null) {
      throw new TProtocolException("Required field 'extension' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResultStandardSchemeFactory implements SchemeFactory {
    public ResultStandardScheme getScheme() {
      return new ResultStandardScheme();
    }
  }

  private static class ResultStandardScheme extends StandardScheme<Result> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Result struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STORAGE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.storageName = iprot.readString();
              struct.setStorageNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORGIN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orginName = iprot.readString();
              struct.setOrginNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXTENSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extension = iprot.readString();
              struct.setExtensionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Result struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.storageName != null) {
        oprot.writeFieldBegin(STORAGE_NAME_FIELD_DESC);
        oprot.writeString(struct.storageName);
        oprot.writeFieldEnd();
      }
      if (struct.orginName != null) {
        oprot.writeFieldBegin(ORGIN_NAME_FIELD_DESC);
        oprot.writeString(struct.orginName);
        oprot.writeFieldEnd();
      }
      if (struct.extension != null) {
        oprot.writeFieldBegin(EXTENSION_FIELD_DESC);
        oprot.writeString(struct.extension);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResultTupleSchemeFactory implements SchemeFactory {
    public ResultTupleScheme getScheme() {
      return new ResultTupleScheme();
    }
  }

  private static class ResultTupleScheme extends TupleScheme<Result> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Result struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.url);
      oprot.writeString(struct.storageName);
      oprot.writeString(struct.orginName);
      oprot.writeString(struct.extension);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Result struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.url = iprot.readString();
      struct.setUrlIsSet(true);
      struct.storageName = iprot.readString();
      struct.setStorageNameIsSet(true);
      struct.orginName = iprot.readString();
      struct.setOrginNameIsSet(true);
      struct.extension = iprot.readString();
      struct.setExtensionIsSet(true);
    }
  }

}

